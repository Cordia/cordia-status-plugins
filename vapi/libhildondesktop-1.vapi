/* libhildondesktop-1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "HD", lower_case_cprefix = "hd_")]
namespace HD {
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class ConfigFile : GLib.InitiallyUnowned {
		[CCode (has_construct_function = false)]
		public ConfigFile (string system_conf_dir, string user_conf_dir, string filename);
		public unowned GLib.KeyFile load_file (bool force_system_config);
		public bool save_file (GLib.KeyFile key_file);
		[CCode (has_construct_function = false)]
		public ConfigFile.with_defaults (string filename);
		[NoAccessorMethod]
		public string filename { owned get; construct; }
		[NoAccessorMethod]
		public string system_conf_dir { owned get; construct; }
		[NoAccessorMethod]
		public string user_conf_dir { owned get; construct; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class HomePluginItem : Gtk.Window, Gtk.Buildable, Atk.Implementor, HD.PluginItem {
		public virtual unowned string get_applet_id ();
		public unowned DBus.RawConnection get_dbus_connection (DBus.BusType type, DBus.Error error);
		public unowned DBus.Connection get_dbus_g_connection (DBus.BusType type) throws GLib.Error;
		public unowned string get_dl_filename ();
		public uint heartbeat_signal_add (uint mintime, uint maxtime, GLib.SourceFunc source_func, void* data, GLib.DestroyNotify destroy);
		public void set_resize_type (HD.HomePluginItemResizeType resize_type);
		public void set_settings (bool settings);
		[NoAccessorMethod]
		public bool is_on_current_desktop { get; }
		public bool settings { set; }
		public virtual signal void show_settings ();
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class Notification : GLib.Object {
		[CCode (has_construct_function = false)]
		public Notification (uint id, string icon, string summary, string body, string actions, GLib.HashTable hints, int timeout, string sender);
		public unowned string get_actions ();
		public unowned string get_body ();
		public unowned string get_category ();
		public unowned string get_dbus_cb (string action_id);
		public uint get_dialog_type ();
		public GLib.Value get_hint (string key);
		public unowned GLib.HashTable get_hints ();
		public unowned string get_icon ();
		public uint get_id ();
		public bool get_persistent ();
		public unowned string get_sender ();
		public unowned string get_summary ();
		public ulong get_time ();
		[NoAccessorMethod]
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] actions { owned get; set; }
		[NoAccessorMethod]
		public string body { owned get; set; }
		[NoAccessorMethod]
		public void* hints { get; set; }
		[NoAccessorMethod]
		public string icon { owned get; set; }
		public uint id { get; construct; }
		[NoAccessorMethod]
		public string sender { owned get; set; }
		[NoAccessorMethod]
		public string summary { owned get; set; }
		[NoAccessorMethod]
		public int timeout { get; set; }
		public virtual signal void closed ();
		public virtual signal void updated ();
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class PluginConfiguration : GLib.Object {
		[CCode (has_construct_function = false)]
		public PluginConfiguration (HD.ConfigFile config_file);
		public unowned string get_all_plugin_paths ();
		public bool get_in_startup ();
		public unowned GLib.KeyFile get_items_key_file ();
		public void run ();
		public bool store_items_key_file ();
		public HD.ConfigFile conf_file { construct; }
		[NoAccessorMethod]
		public void* plugin_config_key_file { get; }
		public virtual signal void configuration_loaded (void* key_file);
		public virtual signal void items_configuration_loaded (void* key_file);
		public virtual signal void plugin_module_added (string desktop_file);
		public virtual signal void plugin_module_removed (string desktop_file);
		public virtual signal void plugin_module_updated (string p0);
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class PluginLoader : GLib.Object {
		public static GLib.Quark error_quark ();
		public virtual unowned GLib.Object load (string plugin_id, GLib.KeyFile keyfile) throws GLib.Error;
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class PluginLoaderDefault : HD.PluginLoader {
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class PluginLoaderFactory : GLib.Object {
		[CCode (type = "GObject*", has_construct_function = false)]
		public PluginLoaderFactory ();
		public unowned GLib.Object create (string plugin_id, string plugin_path) throws GLib.Error;
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class PluginManager : HD.PluginConfiguration {
		[CCode (has_construct_function = false)]
		public PluginManager (HD.ConfigFile config_file);
		public unowned GLib.KeyFile get_plugin_config_key_file ();
		public void run ();
		public void set_load_priority_func (HD.LoadPriorityFunc load_priority_func, void* data, GLib.DestroyNotify destroy);
		public virtual signal void plugin_added (GLib.Object plugin);
		public virtual signal void plugin_removed (GLib.Object plugin);
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class PluginModule : GLib.TypeModule, GLib.TypePlugin {
		[CCode (has_construct_function = false)]
		public PluginModule (string path);
		public void add_type (GLib.Type type);
		[CCode (type = "GObject*", has_construct_function = false)]
		public PluginModule.object (HD.PluginModule module, string plugin_id);
		[NoAccessorMethod]
		public string path { owned get; construct; }
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class Shortcuts : GLib.Object {
		[CCode (has_construct_function = false)]
		public Shortcuts (string gconf_key, GLib.Type shortcut_type);
		public static void add_bookmark_shortcut (string url, string label, string icon);
		[NoAccessorMethod]
		public string gconf_key { owned get; construct; }
		[NoAccessorMethod]
		public GLib.Type shortcut_type { get; construct; }
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class StatusMenuItem : HD.StatusPluginItem, Gtk.Buildable, Atk.Implementor, HD.PluginItem {
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public class StatusPluginItem : Gtk.Bin, Gtk.Buildable, Atk.Implementor, HD.PluginItem {
		public unowned DBus.RawConnection get_dbus_connection (DBus.BusType type, DBus.Error error);
		public unowned DBus.Connection get_dbus_g_connection (DBus.BusType type) throws GLib.Error;
		public unowned string get_dl_filename ();
		public uint heartbeat_signal_add (uint mintime, uint maxtime, GLib.SourceFunc source_func, void* data, GLib.DestroyNotify destroy);
		public void set_status_area_icon (Gdk.Pixbuf icon);
		public void set_status_area_widget (Gtk.Widget widget);
		[NoAccessorMethod]
		public Gdk.Pixbuf status_area_icon { owned get; set; }
		[NoAccessorMethod]
		public Gtk.Widget status_area_widget { owned get; set; }
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public interface NotificationPlugin : GLib.Object {
		public abstract void notify (HD.Notification notification);
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public interface PluginItem : GLib.Object {
		public unowned string get_dl_filename ();
		public unowned string get_plugin_id ();
		public abstract void load_desktop_file (GLib.KeyFile key_file);
		public string plugin_id { get; construct; }
	}
	[CCode (cprefix = "HD_HOME_PLUGIN_ITEM_RESIZE_", has_type_id = "0", cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public enum HomePluginItemResizeType {
		NONE,
		VERTICAL,
		HORIZONTAL,
		BOTH
	}
	[CCode (cprefix = "HD_PLUGIN_LOADER_ERROR_", has_type_id = "0", cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public enum PluginLoaderErrorCode {
		UNKNOWN,
		OPEN,
		SYMBOL,
		INIT,
		KEYFILE,
		UNKNOWN_TYPE
	}
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public delegate uint LoadPriorityFunc (string plugin_id, GLib.KeyFile keyfile);
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public const string PLUGIN_LOADER_TYPE_DEFAULT;
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public const string PLUGIN_MODULE_DL_FILENAME;
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public static uint heartbeat_add (uint mintime, uint maxtime, GLib.SourceFunc function, void* data);
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public static uint heartbeat_add_full (int priority, uint mintime, uint maxtime, GLib.SourceFunc function, void* data, GLib.DestroyNotify notify);
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public static unowned GLib.TimeoutSource heartbeat_source_new (uint mintime, uint maxtime);
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public static bool pvr_texture_save (string file, Gdk.Pixbuf pixbuf) throws GLib.Error;
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public static void stamp_file_finalize (string stamp_file);
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public static bool stamp_file_get_safe_mode ();
	[CCode (cheader_filename = "libhildondesktop/libhildondesktop.h")]
	public static void stamp_file_init (string stamp_file);
}
